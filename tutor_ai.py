"""
@author: Brianna Hinds
Description: LangGraph agent responsible for making Beginner/Intermediate/Advanced explanations of notes.

NOTES:
- This file defines the core AI functionality using the Gemini LLM.
- It uses LangGraph to define a simple, single-step process (state -> summarize -> state).
"""

# import libraries
import os 
from dotenv import load_dotenv
from typing import TypedDict
from langchain_google_genai import ChatGoogleGenerativeAI
from langgraph.graph import StateGraph


# --- Environment Setup and LLM Definition ---
# Load environment variables from the .env file (including GOOGLE_API_KEY)
load_dotenv()
# Retrieve the API key from the environment variables
API = os.getenv("GOOGLE_API_KEY")

# if you do not have a .env file you can do set API to be:  (THIS STEP CAN BE SKIPPED IF YOU HAVE A .env FILE)
#API = "YOUR ACTUAL API KEY"  # copy it from google ai studio and paste between the quotation marks


# Define and initialize the Gemini LLM
llm = ChatGoogleGenerativeAI(
    model="gemini-2.5-flash", # A fast and capable model for general tasks like summarization
    google_api_key=API, 
    temperature=0  # Lower temperature (0) makes the output more predictable and less "creative"
)

# --- Define the AgentState (data flow) --- #
# define the data structure that will be passed down between steps in the graph.
class AgentState(TypedDict):  # TypedDict makes sure that keys and expected value types are defined
    page_content: str  # the raw file text (pulled via PdfReader)
    lvl: str  # choice of the user Beginner/Intermediate/Expert
    summary: str  # the final summary generated by the LLM


# -- Define the Agent Function --- #
def notes_summarizer(state: AgentState) -> AgentState:
    """Summarize notes based on user-selected difficulty level"""
    # create a prompt to guide the LLM's behavior and guide it to the output goal
    prompt = f"""
    You are an AI tutor. Summarize the following notes at a {state['lvl']} level:
    
    Notes:
    {state['page_content']}
    
    Requirements:
    - Beginner: Use simple words, short sentences, everyday examples. Like you are explaining it to a little kid.
    - Intermediate: Use moderate technical terms, explain main ideas, avoid jargon.
    - Expert: Assume the reader has background knowledge, focus on depth and detail.
    """

    # invoke the LLM with the created prompt (this is the same as pressing the enter button after asking ChatGPT a question)
    response = llm.invoke(prompt)

    # return the updated state including the new summary content
    return {"page_content": state["page_content"], "lvl": state["lvl"], "summary": response.content}


# --- Initialize and Define the LangGraph Workflow --- Â 
workflow = StateGraph(AgentState)  # define a new workflow using the defined AgentState
workflow.add_node("summarizer", notes_summarizer)  # add the agent created above as a node in the graph
workflow.set_entry_point("summarizer")   # start here
workflow.set_finish_point("summarizer")  # end here

# compile the workflow into a runnable agent
notes_summary = workflow.compile()